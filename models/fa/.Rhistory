dsStore=dsStore[,-grep("DEA_NUM|numClient|CODE$|^County$|^State$|not.ranked$",colnames(dsStore))]   #drop columns
dim(dsStore)
colnames(dsStore)
#rename columns
colnames(dsStore)=gsub("^retail.x$","retail",colnames(dsStore))
colnames(dsStore)=gsub("^retail.y$","retailInd",colnames(dsStore))
colnames(dsStore)=gsub("^unclassified$","nUnclassifiedBiz",colnames(dsStore))
colnames(dsStore)=gsub("^overall$","nClassifiedBiz",colnames(dsStore))
colnames(dsStore)=gsub("^X2011.population.estimate","population",colnames(dsStore))
colnames(dsStore)=gsub("^county.name$","county",colnames(dsStore))
colnames(dsStore)=gsub("^county.fips$","fip",colnames(dsStore))
colnames(dsStore)
#reorder cols by type
locVar=colnames(dsStore)[grep("^county$|zip|fip|^city$|^state$",colnames(dsStore),ignore.case=T)]
popVar=colnames(dsStore)[grep("population",colnames(dsStore),ignore.case=T)]
insureVar=colnames(dsStore)[grep("insure",colnames(dsStore),ignore.case=T)]
employVar=colnames(dsStore)[grep("employ",colnames(dsStore),ignore.case=T)]
incomeVar=colnames(dsStore)[grep("income",colnames(dsStore),ignore.case=T)]
subsetOrder=c("storeID","zip","city","fip","county","state"
,"busType","bizType","retail","medical","others",
popVar,insureVar,employVar,incomeVar)
otherVar=setdiff(colnames(dsStore),subsetOrder)
dsStore=dsStore[,c(subsetOrder,otherVar)]
colnames(dsStore)
dim(dsStore)
factorColID=which(colType(dsStore,"is.factor"))
characterColID=which(colType(dsStore,"is.character"))
integerColID=which(colType(dsStore,"is.integer"))
doubleColID=which(colType(dsStore,"is.double"))
#identify variables to convert
var2Char="city"
var2integer=c("population", "Other.primary.care.providers", "numCompetitor")
var2double=c("Median.household.income", "Premature.death", "Sexually.transmitted.infections",
"Mental.health.providers", "Violent.crime", "HIV.prevalence.rate", "Health.care.costs")
var2Factor=c("busType", "bizType")
var2char="city"
dsStore[,var2char]=convertType(dsStore,var2Factor,"as.character")
var2factor=c("busType", "bizType")
dsStore[,var2char]=convertType(dsStore,var2Factor,"as.character")
dsStore[,var2factor]=convertType(dsStore,var2Factor,"as.factor")
dsStore[,var2integer]=convertType(dsStore,var2Factor,"as.integer")
dsStore[,var2double]=convertType(dsStore,var2Factor,"as.double")
# Make data matrix concatenated from various sources
# 16-Jun-15 Yen Low
RScriptPath="/mnt/hgfs/scripts"
ProjectPath="/mnt/hgfs/projects"
setwd(paste(ProjectPath,"/insight/models/descriptive",sep=""))
getwd()
source(paste(RScriptPath,"/R/utils.R",sep=""))
source(paste(RScriptPath,"/R/preprocess.R",sep=""))
require(choroplethrZip)
#load all the data sources
load(file=paste0(ProjectPath,"/insight/data/storeChar.RData"),verbose=T)  #store factors
load(file=paste0(ProjectPath,"/insight/data/cbp.RData"),verbose=T)  #CBP biz climate factors
load(file=paste0(ProjectPath,"/insight/data/competition.RData"),verbose=T)  #compet indices
load(file=paste0(ProjectPath,"/insight/data/chr.RData"),verbose=T)  #health indices
#TODO add yelp data
#get zip to county mappings
data(zip.regions)
zip.regions$county.fips=formatC(zip.regions$county.fips.numeric,width=5,format='d',flag='0')
head(sort(zip.regions$county.fips))
lsos()
rm(allStores,bizTypeDf,relTypeDf,cbpTypeAsFeatures,store_county,store_state)
gci()
lsos()
#1602 stores
#map zip to county in order to get county-level health data later
tmp=merge(storeDf,zip.regions[,c("region","county.name","county.fips")], by.x="zip", by.y="region",all.x=T)
#don't double count same store in 2 counties (cos 1 zip can map to 2 counties)
#delete the second county
tmp=tmp[order(tmp$zip,tmp$county.fips),]
dsStore=tmp[!duplicated(tmp$zip),] #1437 stores
dim(dsStore)
#dsStore=merge(dsStore,df_pop_zip,by.x="zip",by.y="region",all.x=T)
dsStore=merge(dsStore,competDf,by.x="zip",by.y=0,all.x=T)     #add compet data
dsStore=merge(dsStore,cbpDf,by.x="zip",by.y="zip",all.x=T)    #add biz data
dsStore=merge(dsStore,chrDf,by.x="county.fips",by.y="fip",all.x=T)    #add health data
dim(dsStore)
colnames(dsStore)
#drop DEA_NUM,"numClient","busType","bizType"
dsStore=dsStore[,-grep("DEA_NUM|numClient|CODE$|^County$|^State$|not.ranked$",colnames(dsStore))]   #drop columns
dim(dsStore)
colnames(dsStore)
#rename columns
colnames(dsStore)=gsub("^retail.x$","retail",colnames(dsStore))
colnames(dsStore)=gsub("^retail.y$","retailInd",colnames(dsStore))
colnames(dsStore)=gsub("^unclassified$","nUnclassifiedBiz",colnames(dsStore))
colnames(dsStore)=gsub("^overall$","nClassifiedBiz",colnames(dsStore))
colnames(dsStore)=gsub("^X2011.population.estimate","population",colnames(dsStore))
colnames(dsStore)=gsub("^county.name$","county",colnames(dsStore))
colnames(dsStore)=gsub("^county.fips$","fip",colnames(dsStore))
colnames(dsStore)
#reorder cols by type
locVar=colnames(dsStore)[grep("^county$|zip|fip|^city$|^state$",colnames(dsStore),ignore.case=T)]
popVar=colnames(dsStore)[grep("population",colnames(dsStore),ignore.case=T)]
insureVar=colnames(dsStore)[grep("insure",colnames(dsStore),ignore.case=T)]
employVar=colnames(dsStore)[grep("employ",colnames(dsStore),ignore.case=T)]
incomeVar=colnames(dsStore)[grep("income",colnames(dsStore),ignore.case=T)]
subsetOrder=c("storeID","zip","city","fip","county","state"
,"busType","bizType","retail","medical","others",
popVar,insureVar,employVar,incomeVar)
otherVar=setdiff(colnames(dsStore),subsetOrder)
dsStore=dsStore[,c(subsetOrder,otherVar)]
colnames(dsStore)
dim(dsStore)
save(dsStore,file=paste0(ProjectPath,"/insight/data/dsStore.RData"))
######ensure variables are of right type
#find which variables are of which type
factorColID=which(colType(dsStore,"is.factor"))
characterColID=which(colType(dsStore,"is.character"))
integerColID=which(colType(dsStore,"is.integer"))
doubleColID=which(colType(dsStore,"is.double"))
#identify variables to convert
var2char="city"
var2factor=c("busType", "bizType")
var2integer=c("population", "Other.primary.care.providers", "numCompetitor")
var2double=c("Median.household.income", "Premature.death", "Sexually.transmitted.infections",
"Mental.health.providers", "Violent.crime", "HIV.prevalence.rate", "Health.care.costs")
#convert variable types
dsStore[,var2char]=convertType(dsStore,var2char,"as.character")
dsStore[,var2factor]=convertType(dsStore,var2factor,"as.factor")
dsStore[,var2integer]=convertType(dsStore,var2integer,"as.integer")
dsStore[,var2double]=convertType(dsStore,var2double,"as.double")
load(file=paste0(ProjectPath,"/insight/data/dsStore.RData"),verbose=T)
factorColID=which(colType(dsStore,"is.factor"))
characterColID=which(colType(dsStore,"is.character"))
integerColID=which(colType(dsStore,"is.integer"))
doubleColID=which(colType(dsStore,"is.double"))
#identify variables to convert
var2char="city"
var2factor=c("busType", "bizType")
var2integer=c("population", "Other.primary.care.providers", "numCompetitor")
var2double=c("Median.household.income", "Premature.death", "Sexually.transmitted.infections",
"Mental.health.providers", "Violent.crime", "HIV.prevalence.rate", "Health.care.costs")
#convert variable types
dsStore[,var2char]=convertType(dsStore,var2char,"as.character")
dsStore[,var2factor]=convertType(dsStore,var2factor,"as.factor")
dsStore[,var2integer]=convertType(dsStore,var2integer,"as.integer")
dsStore[,var2double]=convertType(dsStore,var2double,"as.double")
load(file=paste0(ProjectPath,"/insight/data/dsStore.RData"),verbose=T)
source(paste(RScriptPath,"/R/preprocess.R",sep=""))
factorColID=which(colType(dsStore,"is.factor"))
characterColID=which(colType(dsStore,"is.character"))
integerColID=which(colType(dsStore,"is.integer"))
doubleColID=which(colType(dsStore,"is.double"))
#identify variables to convert
var2char="city"
var2factor=c("busType", "bizType")
var2integer=c("population", "Other.primary.care.providers", "numCompetitor")
var2double=c("Median.household.income", "Premature.death", "Sexually.transmitted.infections",
"Mental.health.providers", "Violent.crime", "HIV.prevalence.rate", "Health.care.costs")
#convert variable types
dsStore[,var2char]=convertType(dsStore,var2char,"as.character")
dsStore[,var2factor]=convertType(dsStore,var2factor,"as.factor")
dsStore[,var2integer]=convertType(dsStore,var2integer,"as.integer")
dsStore[,var2double]=convertType(dsStore,var2double,"as.double")
View(dsStore)
table(dsStore$HIV.prevalence.rate)
load(file=paste0(ProjectPath,"/insight/data/dsStore.RData"),verbose=T)
table(dsStore$HIV.prevalence.rate)
as.double(dsStore$HIV.prevalence.rate)
dsStore$HIV.prevalence.rate
as.double(dsStore$HIV.prevalence.rate)
as.numeric(dsStore$HIV.prevalence.rate)
load(file=paste0(ProjectPath,"/insight/data/dsStore.RData"),verbose=T)
dsStore[,var2double]=convertType(dsStore,var2double,"as.character")
dsStore[,var2double]=convertType(dsStore,var2double,"as.double")
load(file=paste0(ProjectPath,"/insight/data/dsStore.RData"),verbose=T)
as.double(as.character(dsStore$HIV.prevalence.rate))
as.numeric(as.character(dsStore$HIV.prevalence.rate))
dsStore[,var2double]=convertType(dsStore,var2double,"as.character")
dsStore[,var2double]=convertType(dsStore,var2double,"as.double")
dsStore$HIV.prevalence.rate
dsStore[,var2integer]=convertType(dsStore,var2integer,"as.character")
dsStore[,var2integer]=convertType(dsStore,var2integer,"as.integer")
dsStore[1:10,var2integer]
dsStore[,var2double]=convertType(dsStore,var2double,"as.character")
dsStore[1:3,var2double]
load(file=paste0(ProjectPath,"/insight/data/dsStore.RData"),verbose=T)
factorColID=which(colType(dsStore,"is.factor"))
characterColID=which(colType(dsStore,"is.character"))
integerColID=which(colType(dsStore,"is.integer"))
doubleColID=which(colType(dsStore,"is.double"))
var2char="city"
var2factor=c("busType", "bizType")
var2integer=c("population", "Other.primary.care.providers", "numCompetitor")
var2double=c("Median.household.income", "Premature.death", "Sexually.transmitted.infections",
"Mental.health.providers", "Violent.crime", "HIV.prevalence.rate", "Health.care.costs")
dsStore[,var2char]=convertType(dsStore,var2char,"as.character")
dsStore[1:3,var2char]
dsStore[1:3,var2factor]
dsStore[1:3,var2integer]
dsStore[,var2factor]=convertType(dsStore,var2factor,"as.factor")
dsStore[,var2integer]=convertType(dsStore,var2integer,"as.character")
dsStore[,var2integer]=convertType(dsStore,var2integer,"as.integer")
load(file=paste0(ProjectPath,"/insight/data/dsStore.RData"),verbose=T)
dsStore[,var2char]=convertType(dsStore,var2char,"as.character")
dsStore[,var2factor]=convertType(dsStore,var2factor,"as.factor")
dsStore[,var2integer]=convertType(dsStore,var2integer,"as.character")
dsStore[1:3,var2integer]
source(paste(RScriptPath,"/R/preprocess.R",sep=""))
load(file=paste0(ProjectPath,"/insight/data/dsStore.RData"),verbose=T)
factorColID=which(colType(dsStore,"is.factor"))
characterColID=which(colType(dsStore,"is.character"))
integerColID=which(colType(dsStore,"is.integer"))
doubleColID=which(colType(dsStore,"is.double"))
#identify variables to convert
var2char="city"
var2factor=c("busType", "bizType")
var2integer=c("population", "Other.primary.care.providers", "numCompetitor")
var2double=c("Median.household.income", "Premature.death", "Sexually.transmitted.infections",
"Mental.health.providers", "Violent.crime", "HIV.prevalence.rate", "Health.care.costs")
#convert variable types
dsStore[,var2char]=convertType(dsStore,var2char,"as.character")
dsStore[1:3,var2char]
dsStore[,var2factor]=convertType(dsStore,var2factor,"as.factor")
dsStore[1:3,var2factor]
dsStore[,var2integer]=convertType(dsStore,var2integer,"as.character")
dsStore[1:3,var2integer]
dsStore[,var2integer]=convertType(dsStore,var2integer,"as.integer")
dsStore[1:3,var2integer]
load(file=paste0(ProjectPath,"/insight/data/dsStore.RData"),verbose=T)
dsStore[,var2double]=gsub(",","",convertType(dsStore,var2double,"as.character"))
dsStore[1:3,var2double]=convertType(dsStore,var2double,"as.double")
warnings()
load(file=paste0(ProjectPath,"/insight/data/dsStore.RData"),verbose=T)
dsStore[,var2double]=gsub(",","",convertType(dsStore,var2double,"as.character"))
dsStore[1:3,var2double]
source(paste(RScriptPath,"/R/preprocess.R",sep=""))
load(file=paste0(ProjectPath,"/insight/data/dsStore.RData"),verbose=T)
dsStore[,var2double]=convertType(dsStore,var2double,"toNumWithoutComma")
dsStore[1:3,var2double]
tmp=dsStore[1:3,var2double]
load(file=paste0(ProjectPath,"/insight/data/dsStore.RData"),verbose=T)
dsStore[,var2char]=convertType(dsStore,var2char,"as.character")
dsStore[,var2factor]=convertType(dsStore,var2factor,"as.factor")
#need to convert factor to character then numeric
dsStore[,var2integer]=convertType(dsStore,var2integer,"toNumWithoutComma")
#need to convert factor to character then numeric
dsStore[,var2double]=convertType(dsStore,var2double,"toNumWithoutComma")
save(dsStore,file=paste0(ProjectPath,"/insight/data/dsStore.RData"))
RScriptPath="/mnt/hgfs/scripts"
ProjectPath="/mnt/hgfs/projects"
setwd(paste(ProjectPath,"/insight/models/rf_fastVsSlow",sep=""))
getwd()
source(paste(RScriptPath,"/R/utils.R",sep=""))
require(randomForest)
require(choroplethrZip)
load(file=paste0(ProjectPath,"/insight/data/revGrowth.RData"),verbose=T)  #response: sales growthload
head(highGrowthDf,3)
load(file=paste0(ProjectPath,"/insight/data/dsStore.RData"),verbose=T)  #store level
head(dsStore,3)
dsMat=as.data.frame(merge(highGrowthDf,dsStore,by.x=0,by.y="storeID",sort=T))
head(dsMat,3)
save(dsMat,file="dsMat.RData")
#load(file="dsMat.RData",verbose=T)
testID=sample(nrow(dsMat),0.1*nrow(dsMat))
#ensure no NA or missing values (do zero imputation)
sum(is.na(dsMat))
dsMat[is.na(dsMat)]=0
sum(is.na(dsMat))
save(dsMat,testID,file="dsMat.RData")
excludeVarID=grep("Row.names|high|zip|Type",colnames(dsMat))
excludeVarID
colnames(dsMat)[excludeVarID]
excludeVarID=grep("Row.names|high|zip|city|county|state|Type",colnames(dsMat))
colnames(dsMat)[excludeVarID]
excludeVarID=grep("Row.names|high|zip|city|fip|county|state|Type",colnames(dsMat))
colnames(dsMat)[excludeVarID]
dsMat$highMthGrowth=as.factor(dsMat$highMthGrowth)
mod_rf=randomForest(x=dsMat[-testID,-excludeVarID],y=dsMat$highMthGrowth[-testID],
xtest=dsMat[testID,-excludeVarID],ytest=dsMat$highMthGrowth[testID])
mod_rf
imptVar=as.matrix(importance(mod_rf))
imptVar=imptVar[,"MeanDecreaseGini"]
par(mar=c(1,20,2,0))
barplot(sort(imptVar),horiz=T,las=1,cex.names=0.7, main="Variable importance")
barplot(sort(imptVar)[1:100],horiz=T,las=1,cex.names=0.7, main="Variable importance")
barplot(sort(imptVar)[1:50],horiz=T,las=1,cex.names=0.7, main="Variable importance")
par(mar=c(1,20,2,0))
barplot(sort(imptVar)[1:50],horiz=T,las=1,cex.names=0.7, main="Variable importance")
barplot(sort(imptVar)[1:50],horiz=T,las=1,cex.names=0.7, main="Variable importance")
barplot(sort(imptVar)[1:50],horiz=T,log="y",las=1,cex.names=0.7, main="Variable importance")
barplot(sort(imptVar)[1:50],horiz=T,log="x",las=1,cex.names=0.7, main="Variable importance")
sort(imptVar)
barplot(sort(imptVar)[1:50],horiz=T,log="x",las=1,cex.names=0.7, main="Variable importance")
barplot(sort(imptVar)[1:50],horiz=T,las=1,cex.names=0.7, main="Variable importance")
barplot(sort(imptVar)[1:30],horiz=T,las=1,cex.names=0.7, main="Variable importance")
str(dsStore)
str(dsStore)
text(0.1,sort(imptVar)[1:30],cex=0.7)
text(0.1,sort(imptVar)[1:30],cex=0.7,pos=4)
barplot(sort(imptVar)[1:30],horiz=T,las=1,cex.names=0.7, main="Variable importance")
text(0.1,sort(imptVar)[1:30],cex=0.7,pos=4)
barplot(sort(imptVar)[1:30],horiz=T,las=1,cex.names=0.7, main="Variable importance")
text(0.1,sort(imptVar)[1:30],cex=1,pos=4)
barplot(sort(imptVar)[1:30],horiz=T,las=1,cex.names=0.7, main="Variable importance")
barplot(rev(sort(imptVar))[1:30],horiz=T,las=1,cex.names=0.7, main="Variable importance")
barplot(rev(sort(imptVar))[30:1],horiz=T,las=1,cex.names=0.7, main="Variable importance")
barplot(rev(sort(imptVar))[50:1],horiz=T,las=1,cex.names=0.7, main="Variable importance")
barplot(rev(sort(imptVar))[50:1],horiz=T,las=1,log="x",cex.names=0.7, main="Variable importance")
barplot(sort(imptVar,decreasing=T)[1:50],horiz=T,las=1,log="x",cex.names=0.6, main="Variable importance")
barplot(sort(imptVar,decreasing=T)[50:1],horiz=T,las=1,log="x",cex.names=0.6, main="Variable importance")
sort(imptVar,decreasing=T)[length(imptVar):51]
imptVar
imptVar=as.matrix(importance(mod_rf))
sort(imptVar[,"MeanDecreaseGini"],decreasing=T)
imptVar=sort(imptVar[,"MeanDecreaseGini"],decreasing=T)
barplot(imptVar[50:1],horiz=T,las=1,log="x",cex.names=0.6, main="Variable importance")
imptVar[length(imptVar):51]
as.matrix(imptVar[length(imptVar):51])
as.matrix(imptVar[51:length(imptVar)])
write.table(as.matrix(imptVar),file="imptVar.txt",colnames=NA)
write.table(as.matrix(imptVar),file="imptVar.txt",col.names=NA)
write.table(as.matrix(imptVar),file="imptVar.txt",col.names=F)
write.table(as.matrix(imptVar),file="imptVar.txt",col.names=F,quote=F,sep="\t")
unique(dsMat$storeID)
RScriptPath="/mnt/hgfs/scripts"
ProjectPath="/mnt/hgfs/projects"
setwd(paste(ProjectPath,"/insight/models/hlm_josh",sep=""))
getwd()
source(paste(RScriptPath,"/R/utils.R",sep=""))
source(paste(RScriptPath,"/R/localMySQL.R",sep=""))
#source(paste(RScriptPath,"/R/hampel.R",sep=""))
#source(paste(RScriptPath,"/R/growth.R",sep=""))
require(RMySQL)
require(astsa)
require(TTR)
require(nlme)
require(lattice)
con = dbConnect(drv, username=username, password=passwd)
totRev=dbGetQuery(con,"SELECT * FROM testdb.totsales_month order by customer_identifier, yr_month")
dbDisconnect(con)
head(totRev,3)
load(file=paste0(ProjectPath,"/insight/data/dsStore.RData"),verbose=T)  #store level
#load(file=paste0(ProjectPath,"/insight/data/revGrowth.RData"),verbose=T)  #response: sales growthload
dsMat=merge(dsStore,totRev,by.x="storeID",by.y="customer_identifier",sort=T)
dsMat=dsMat[order(dsMat$storeID,dsMat$yr_month),]
#Change from yr_month to numeric order
#as.numeric(dsMat$yr_month)
yr_monthOrder=data.frame(yr_month=sort(unique(dsMat$yr_month)))
yr_monthOrder$timeOrder=1:nrow(yr_monthOrder)
#yr_monthOrder
dsMat=merge(dsMat,yr_monthOrder,by="yr_month",sort=T)
dsMat=dsMat[order(dsMat$storeID,dsMat$timeOrder),c(2:ncol(dsMat),1)]
dsMat$empRate=dsMat$nEmployed/dsMat$population
str(dsMat)
unique(dsMat$storeID)
sample(unique(dsMat$storeID),20)
selStore=sample(unique(dsMat$storeID),20)
xyplot(totalRevenue~timeOrder|as.factor(storeID),data=dsMat[dsMat$storeID %in% selStore,],col.line="black")
mod_intAsOutcome=lme(totalRevenue~timeOrder+competDensity+nBiz+population+empRate+AnnPayrollK,
random=~timeOrder|as.factor(storeID),data=dsMat,
na.action=na.omit,control=list(opt="optim"))
summary(mod_intAsOutcome)
VarCorr(mod_intAsOutcome)
mod_slopeAsOutcome=lme(totalRevenue~timeOrder*competDensity+ timeOrder*nBiz+ timeOrder*population
+ timeOrder*empRate+ timeOrder*AnnPayrollK,
random=~timeOrder|as.factor(storeID),data=dsMat,
na.action=na.omit,control=list(opt="optim"))
summary(mod_slopeAsOutcome)
VarCorr(mod_slopeAsOutcome)
anova(mod_intAsOutcome,mod_slopeAsOutcome)
anova(mod_slopeAsOutcome,mod_intAsOutcome)
mod_bestslopeAsOutcome=lme(totalRevenue~timeOrder*competDensity+ timeOrder*nBiz + population
+ timeOrder*AnnPayrollK,
random=~timeOrder|as.factor(storeID),data=dsMat,
na.action=na.omit,control=list(opt="optim"))
summary(mod_bestslopeAsOutcome)
VarCorr(mod_bestslopeAsOutcome)
RScriptPath="/mnt/hgfs/scripts"
ProjectPath="/mnt/hgfs/projects"
setwd(paste(ProjectPath,"/insight/models/fa",sep=""))
getwd()
source(paste(RScriptPath,"/R/utils.R",sep=""))
source(paste(RScriptPath,"/R/localMySQL.R",sep=""))
#source(paste(RScriptPath,"/R/hampel.R",sep=""))
#source(paste(RScriptPath,"/R/growth.R",sep=""))
require(RMySQL)
require(nlme)
require(lattice)
con = dbConnect(drv, username=username, password=passwd)
totRev=dbGetQuery(con,"SELECT * FROM testdb.totsales_month order by customer_identifier, yr_month")
dbDisconnect(con)
head(totRev,3)
load(file=paste0(ProjectPath,"/insight/data/dsStore.RData"),verbose=T)  #store level
#load(file=paste0(ProjectPath,"/insight/data/revGrowth.RData"),verbose=T)  #response: sales growthload
dsMat=merge(dsStore,totRev,by.x="storeID",by.y="customer_identifier",sort=T)
dsMat=dsMat[order(dsMat$storeID,dsMat$yr_month),]
#Change from yr_month to numeric order
#as.numeric(dsMat$yr_month)
yr_monthOrder=data.frame(yr_month=sort(unique(dsMat$yr_month)))
yr_monthOrder$timeOrder=1:nrow(yr_monthOrder)
#yr_monthOrder
dsMat=merge(dsMat,yr_monthOrder,by="yr_month",sort=T)
dsMat=dsMat[order(dsMat$storeID,dsMat$timeOrder),c(2:ncol(dsMat),1)]
dsMat$empRate=dsMat$nEmployed/dsMat$population
str(dsMat)
mod_intAsOutcome=lme(totalRevenue~timeOrder+competDensity+nBiz+population+empRate+AnnPayrollK,
random=~timeOrder|as.factor(storeID),data=dsMat,
na.action=na.omit,control=list(opt="optim"))
summary(mod_intAsOutcome)
VarCorr(mod_intAsOutcome)
require(psych)
install.packages("psych")
require(psych)
mod_fa=factor.pa(dsMat, nfactors=3, rotation="varimax")
excludeVarID=grep("Row.names|high|zip|city|fip|county|state|Type",colnames(dsMat))
colnames(dsMat)[excludeVarID]
dsMat=merge(dsStore,totRev,by.x="storeID",by.y="customer_identifier",sort=T)
excludeVarID=grep("Row.names|high|zip|city|fip|county|state|Type",colnames(dsMat))
colnames(dsMat)[excludeVarID]
dsMat=merge(dsStore,totRev,by.x="storeID",by.y="customer_identifier",sort=T)
excludeVarID=grep("Row.names|high|zip|city|fip|county|^state$|Type",colnames(dsMat))
colnames(dsMat)[excludeVarID]
dsMat=dsMat[order(dsMat$storeID,dsMat$yr_month),-excludeVarID]
str(dsMat)
dsMat=merge(dsStore,totRev,by.x="storeID",by.y="customer_identifier",sort=T)
excludeVarID=grep("storeID|Row.names|high|zip|city|fip|county|^state$|Type",colnames(dsMat))
colnames(dsMat)[excludeVarID]
dsMat=dsMat[order(dsMat$storeID,dsMat$yr_month),-excludeVarID]
str(dsMat)
mod_fa=factor.pa(dsMat, nfactors=3, rotation="varimax")
?factor.[a]
?factor.pa
mod_fa=fa(dsMat, nfactors=3, rotation="varimax",fm="pa")
table(dsMat$Adult.smoking)
is.numeric(dsMatg)
is.numeric(dsMat)
colType(dsMat,is.numeric)
source('/mnt/hgfs/scripts/R/preprocess.R')
colType(dsMat,is.numeric)
colType(dsMat,"is.numeric"")
colType(dsMat,"is.numeric")
colType(dsMat,"is.numeric")
which(!is.numeric(dsMat))
mod_fa=fa(as.numeric(dsMat), nfactors=3, rotation="varimax",fm="pa")
mod_fa=fa(as.double(dsMat), nfactors=3, rotation="varimax",fm="pa")
tmp=as.double(dsMat)
mode(dsMat)="numeric"
mode(dsMat)="double"
tmp=as.natrix(dsMat)
tmp=as.matrix(dsMat)
mod_fa=fa(tmp, nfactors=3, rotation="varimax",fm="pa")
mode(tmp)="numeric"
mod_fa=fa(tmp, nfactors=3, rotation="varimax",fm="pa")
mod_fa=factanal(mydata, 3, rotation="varimax")  #using MLE
print(mod_fa, digits=2, cutoff=.3, sort=TRUE)
# plot factor 1 by factor 2
load <- fit$loadings[,1:2]
plot(load,type="n") # set up plot
text(load,labels=names(mydata),cex=.7) # add variable names
mod_fa=factanal(dsmat, 3, rotation="varimax")  #using MLE
mod_fa=factanal(dsMat, 3, rotation="varimax")  #using MLE
mod_fa=factanal(tmp, 3, rotation="varimax")  #using MLE
?factanal
mod_fa=factanal(tmp, 3, rotation="varimax",na.action="na.pass")  #using MLE
mod_fa=factanal(tmp, 3, rotation="varimax",na.action="na.fail")  #using MLE
mod_fa=factanal(tmp, 3, rotation="varimax",na.action="na.omit")  #using MLE
mod_fa=fa(tmp, nfactors=3, rotation="varimax",fm="pa") #using principal axis
source(paste(RScriptPath,"/R/preprocess.R",sep=""))
tmp2=rmCol(tmp,maxFracConstant=0.9,minSD=0.001,maxR2=0.9,maxNA=0.3)
setdiff(colnames(tmp),colnames(tmp2))
tmp2=rmCol(tmp,maxFracConstant=0.95,minSD=0.001,maxR2=0.9,maxNA=0.3)
setdiff(colnames(tmp),colnames(tmp2))
tmp2=rmCol(tmp,maxFracConstant=0.99,minSD=0.001,maxR2=0.9,maxNA=0.3)
setdiff(colnames(tmp),colnames(tmp2))
mod_fa=factanal(tmp2, 3, rotation="varimax",na.action="na.omit")  #using MLE
mod_fa=fa(tmp2, nfactors=3, rotation="varimax",fm="pa") #using principal axis
install.packages("GPArotation")
require(GPArotation)
mod_fa=fa(tmp2, nfactors=4, rotation="varimax",fm="pa") #using principal axis
mod_fa=fa(tmp2, nfactors=4, rotation="varimax") #using principal axis
mod_fa # print results
mod_fa=fa(tmp2, nfactors=ncol(tmp2), rotation="varimax") #using principal axis
mod_fa
str(tmp2)
mod_fa
attribute(mod_fa)
attributes(mod_fa)
mod_fa$loadings
tmp=as.data.frame(mod_fa$loadings)
typeof(mod_fa$loadings)
mod_fa$loadings[order(mod_fa$loadings[,1],]
mod_fa$loadings[order(mod_fa$loadings[,1]),]
mod_fa$loadings[order(mod_fa$loadings[,2]),2]
mod_fa$loadings[order(abs(mod_fa$loadings[,2])),2]
mod_fa$loadings[order(abs(mod_fa$loadings[,2])),]
mod_fa=fa(tmp2, nfactors=3, rotation="varimax") #using principal axis
mod_fa=fa(tmp2, nfactors=3, rotation="promax") #using principal axis
?fa
mod_fa=fa(tmp2, nfactors=3, rotation="oblimin") #using principal axis
mod_fa # print results
mod_fa$loadings[order(abs(mod_fa$loadings[,2])),]
mod_fa$loadings[order(abs(mod_fa$loadings[,1])),]
mod_fa$loadings[order(abs(mod_fa$loadings[,2])),]
mod_fa$loadings[order(abs(mod_fa$loadings[,3])),]
mod_fa
mod_fa10=fa(tmp2, nfactors=10, rotation="oblimin") #using principal axis
mod_fa10 # print results
plot(mod_fa10)
mod_fa10$loadings[order(abs(mod_fa10$loadings[,1])),]
mod_fa10$loadings[order(abs(mod_fa10$loadings[,1]),decreasing=T),]
mod_fa10$loadings[order(abs(mod_fa10$loadings[,2]),decreasing=T),]
mod_fa10$loadings[order(abs(mod_fa10$loadings[,1]),decreasing=T),]
mod_fa10=fa(tmp2, nfactors=72, rotation="oblimin") #using principal axis
mod_fa10 # print results
mod_fa10=fa(tmp2, nfactors=20, rotation="oblimin") #using principal axis
mod_fa10
1
attributes(mod_fa10)
attributes(mod_fa10)
